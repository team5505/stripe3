// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5505.stripeVision;

import org.usfirst.frc5505.stripeVision.commands.AutonPlaceGearRightSide;
import org.usfirst.frc5505.stripeVision.commands.WaitDriveTime;
import org.usfirst.frc5505.stripeVision.commands.DriveToUltrasonicDistance;
import org.usfirst.frc5505.stripeVision.commands.encoderDrive;
import org.usfirst.frc5505.stripeVision.commands.turnAngle;
import org.usfirst.frc5505.stripeVision.commands.*;
import org.usfirst.frc5505.stripeVision.subsystems.*;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick drivestick;
    public JoystickButton agitate;
    public JoystickButton cannon;
    public Joystick butonstick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        butonstick = new Joystick(1);
        
        cannon = new JoystickButton(butonstick, 6);
        cannon.whileHeld(new blast());
        agitate = new JoystickButton(butonstick, 2);
        agitate.whileHeld(new pester());
        drivestick = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("blast", new blast());
        SmartDashboard.putData("pester", new pester());
        SmartDashboard.putData("scaleAndIntake", new scaleAndIntake());
        SmartDashboard.putData("JoystickDrive", new JoystickDrive());
        SmartDashboard.putData("timeoutdrive: crossBaseLine", new timeoutdrive(6));
        SmartDashboard.putData("MeasuredDrive", new MeasuredDrive());
        SmartDashboard.putData("DriveToUltrasonicDistance: gearToPin", new DriveToUltrasonicDistance(30));
        SmartDashboard.putData("turnAngle: 60degrees", new turnAngle(60));
        SmartDashboard.putData("turnAngle: minus60degrees", new turnAngle(-60));
        SmartDashboard.putData("encoderDrive: 10feet", new encoderDrive(120));
        SmartDashboard.putData("encoderDrive: 1foot", new encoderDrive(12));
        SmartDashboard.putData("encoderDrive: 2feet", new encoderDrive(24));
        SmartDashboard.putData("encoderDrive: -20 inches", new encoderDrive(-20));
        SmartDashboard.putData("AutonPlaceGearRightSide", new AutonPlaceGearRightSide());
        SmartDashboard.putData("WaitDriveTime: oneSecond", new WaitDriveTime(1));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        SmartDashboard.putData("Vision_Auton", new Vision_Auton(28, 0.5));
        SmartDashboard.putData("encoderDrive: 2feet, ultrasonic 20in", new encoderDrive(24, 20, false));
        


    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdrivestick() {
        return drivestick;
    }

    public Joystick getbutonstick() {
        return butonstick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

