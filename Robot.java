// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5505.stripeVision;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.PowerDistributionPanel;

import org.usfirst.frc5505.stripeVision.commands.*;
import org.usfirst.frc5505.stripeVision.subsystems.*;
import org.usfirst.frc5505.stripeVision.subsystems.VisionSubsystem;
import org.usfirst.frc5505.stripeVision.commands.Vision_Auton;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    Command timeddrive;
    SendableChooser choose;
    PowerDistributionPanel PDP;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static drive drive;
    public static intakeAndWinch intakeAndWinch;
    public static agitator agitator;
    public static Shooter shooter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static VisionSubsystem visionSubsystem;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive = new drive();
        intakeAndWinch = new intakeAndWinch();
        agitator = new agitator();
        shooter = new Shooter();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
 
        visionSubsystem = new VisionSubsystem();

        
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
       // CameraServer.getInstance().startAutomaticCapture("gear",0);
       // CameraServer.getInstance().startAutomaticCapture("shooter",1);
        //choose=new SendableChooser();
       //put this past autocode
        drive.initUltrasonic();

        choose= new SendableChooser();        
        choose.addDefault("Deliver Gear Straight", new DriveToUltrasonicDistance(20));
        choose.addObject("Baseline Cross time 6 sec.", new timeoutdrive(6));//20 seconds  
        choose.addObject("Right side gear",  new AutonPlaceGearRightSide());
        choose.addObject("Vision_Auton distance 28, speed 0.5, time 3", new Vision_Auton(28, 0.5, 3));

        SmartDashboard.putData("Auton Chooser", choose);
        
        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example) 
    	autonomousCommand= (Command)choose.getSelected();
    	
    	if (autonomousCommand != null) autonomousCommand.start();
    	
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Ultrasonic reading",(int) Robot.drive.getBackUltrasonicDistance());
        visionSubsystem.updateStatus();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
       if (autonomousCommand != null) autonomousCommand.cancel();
    	//if (timeddrive !=null) timeddrive.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Ultrasonic reading",(int) Robot.drive.getBackUltrasonicDistance());
        
      //  PDP.clearStickyFaults();
        
        

//        RobotMap.intakeCANTalon1.set(-Robot.oi.getbutonstick().getRawAxis(3));
    }
    
    /*public void clearStickyFaults(){
    	drive.clearStickyFaults();
    	
    }*/

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
