// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5505.stripeVision.subsystems;

import org.usfirst.frc5505.stripeVision.RobotMap;
import org.usfirst.frc5505.stripeVision.commands.*;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Ultrasonic;
import com.kauailabs.navx.frc.AHRS;


/**
 *
 */
public class drive extends Subsystem {
	double reduction =.9;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon rightRearTalon2 = RobotMap.driveRightRearTalon2;
    private final CANTalon leftFrontTalon6 = RobotMap.driveLeftFrontTalon6;
    private final CANTalon leftRearTalon3 = RobotMap.driveLeftRearTalon3;
    private final CANTalon rigthFrontTalon4 = RobotMap.driveRigthFrontTalon4;
    private final RobotDrive robotDrive41 = RobotMap.driveRobotDrive41;
    private final Ultrasonic backUltrasonic = RobotMap.driveBackUltrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private final AHRS gyro = new AHRS(SPI.Port.kMXP);

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoystickDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void drivebase(Joystick drivestick){
    	robotDrive41.mecanumDrive_Cartesian(drivestick.getRawAxis(0)*reduction, drivestick.getRawAxis(1)*reduction, -drivestick.getRawAxis(4)*reduction, 0);
    	
    }
    
    public void drivestraight(double speed){
    	robotDrive41.tankDrive(speed, speed);   	
    }
    
    public void tankDrive(double leftSpeed, double rightSpeed) {
    	robotDrive41.tankDrive(leftSpeed, rightSpeed);
    }
    
    public double getGyroAngle(){
    	return gyro.getAngle();
    }
    
    public void resetGyro(){
    	gyro.reset();
    }
    
    public RobotDrive getRobotDrive() {
		return robotDrive41;

	}

    public double getBackUltrasonicDistance(){
    	return backUltrasonic.getRangeInches();
    }
        
    public int getCanTalonEncoderCounts(){
    	SmartDashboard.putNumber("talon2", rightRearTalon2.getEncPosition());
    	SmartDashboard.putNumber("talon3", leftRearTalon3.getEncPosition());
    	SmartDashboard.putNumber("talon4", rigthFrontTalon4.getEncPosition());
    	SmartDashboard.putNumber("talon6", leftFrontTalon6.getEncPosition());
    	return leftRearTalon3.getEncPosition();
    	
    }
    
    public void resetEncoders(){
    	leftRearTalon3.reset();
    }
    
  
    public void zeroEncoderTalon(){
    	leftRearTalon3.setPosition(0);
    }
    
    public void setFeedbackDevice() {  // always use the quadrature encoder.
    	leftRearTalon3.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    }
 
    public void initUltrasonic() {
    	backUltrasonic.setAutomaticMode(true);
    }
    
    public void clearStickyFaults(){
    	rightRearTalon2.clearStickyFaults();
    	leftFrontTalon6.clearStickyFaults();
    	leftRearTalon3.clearStickyFaults();
    	rigthFrontTalon4.clearStickyFaults();
    }
    
}


