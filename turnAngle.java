// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5505.stripeVision.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5505.stripeVision.Robot;

/**
 *
 */
public class turnAngle extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_degrees;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private double m_setAngle = 0;
    private double p = 0.7;
    private double m_maxSpeed = 0.5;

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public turnAngle(double degrees) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_degrees = degrees;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	double currentAngle = Robot.drive.getGyroAngle();
    	
    	m_setAngle = currentAngle + m_degrees;
    	SmartDashboard.putNumber("SetAngle ", (int)m_setAngle);
    	
    	if (m_degrees < 0)  // turning left means right motor forward and left motor back.
    		Robot.drive.tankDrive(-m_maxSpeed, m_maxSpeed);
    	else
    		Robot.drive.tankDrive(m_maxSpeed, -m_maxSpeed);
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	SmartDashboard.putNumber("CurrentAngle ", (int)Robot.drive.getGyroAngle());
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	boolean rc = false;
    	double currentAngle = Robot.drive.getGyroAngle();

    	if (m_degrees < 0) {
    		if (currentAngle < m_setAngle) 
    			rc = true;
    	}
    	else 
    		if (currentAngle >= m_setAngle)
    			rc = true;
    	
        return rc;
        //return false;
    }

    // Called once after isFinished returns true
    protected void end() {
		Robot.drive.tankDrive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
